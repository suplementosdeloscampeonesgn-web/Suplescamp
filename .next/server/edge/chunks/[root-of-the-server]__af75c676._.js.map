{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/auth.js"],"sourcesContent":["//import NextAuth from \"next-auth\"\r\n//import CredentialsProvider from \"next-auth/providers/credentials\"\r\n//import bcrypt from 'bcryptjs'\r\n//import { connectDB } from '@/lib/mongodb'\r\n//import User from '@/models/User'\r\n\r\nexport const { handlers, signIn, signOut, auth } = NextAuth({\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: 'credentials',\r\n      credentials: {\r\n        email: { label: 'Email', type: 'email' },\r\n        password: { label: 'Password', type: 'password' }\r\n      },\r\n      async authorize(credentials) {\r\n        if (!credentials?.email || !credentials?.password) {\r\n          return null\r\n        }\r\n\r\n        try {\r\n          await connectDB()\r\n          const user = await User.findOne({ email: credentials.email })\r\n          \r\n          if (!user) return null\r\n\r\n          const isValid = await bcrypt.compare(credentials.password, user.password)\r\n          if (!isValid) return null\r\n\r\n          return {\r\n            id: user._id.toString(),\r\n            email: user.email,\r\n            name: user.name,\r\n          }\r\n        } catch (error) {\r\n          return null\r\n        }\r\n      }\r\n    })\r\n  ],\r\n  pages: {\r\n    signIn: '/auth/login',\r\n  },\r\n  callbacks: {\r\n    async session({ session, token }) {\r\n      session.user.id = token.sub\r\n      return session\r\n    }\r\n  }\r\n})\r\n"],"names":[],"mappings":"AAAA,kCAAkC;AAClC,mEAAmE;AACnE,+BAA+B;AAC/B,2CAA2C;AAC3C,kCAAkC;;;;;;;AAE3B,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,SAAS;IAC1D,WAAW;QACT,oBAAoB;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,OAAO;gBACT;gBAEA,IAAI;oBACF,MAAM;oBACN,MAAM,OAAO,MAAM,KAAK,OAAO,CAAC;wBAAE,OAAO,YAAY,KAAK;oBAAC;oBAE3D,IAAI,CAAC,MAAM,OAAO;oBAElB,MAAM,UAAU,MAAM,OAAO,OAAO,CAAC,YAAY,QAAQ,EAAE,KAAK,QAAQ;oBACxE,IAAI,CAAC,SAAS,OAAO;oBAErB,OAAO;wBACL,IAAI,KAAK,GAAG,CAAC,QAAQ;wBACrB,OAAO,KAAK,KAAK;wBACjB,MAAM,KAAK,IAAI;oBACjB;gBACF,EAAE,OAAO,OAAO;oBACd,OAAO;gBACT;YACF;QACF;KACD;IACD,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,GAAG;YAC3B,OAAO;QACT;IACF;AACF"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.js"],"sourcesContent":["import { auth } from \"./auth\"\r\n\r\nexport default auth((req) => {\r\n  // Verificar si la ruta requiere autenticación\r\n  const isProtected = req.nextUrl.pathname.startsWith('/dashboard')\r\n  \r\n  if (isProtected && !req.auth) {\r\n    // Redirigir al login si no está autenticado\r\n    const url = req.url.replace(req.nextUrl.pathname, '/auth/login')\r\n    return Response.redirect(url)\r\n  }\r\n})\r\n\r\nexport const config = {\r\n  matcher: [\"/dashboard/:path*\"]\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;uCAEe,CAAA,GAAA,mHAAA,CAAA,OAAI,AAAD,EAAE,CAAC;IACnB,8CAA8C;IAC9C,MAAM,cAAc,IAAI,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC;IAEpD,IAAI,eAAe,CAAC,IAAI,IAAI,EAAE;QAC5B,4CAA4C;QAC5C,MAAM,MAAM,IAAI,GAAG,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,QAAQ,EAAE;QAClD,OAAO,SAAS,QAAQ,CAAC;IAC3B;AACF;AAEO,MAAM,SAAS;IACpB,SAAS;QAAC;KAAoB;AAChC"}}]
}